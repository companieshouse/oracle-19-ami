---
- name: install boto and botocore
  ansible.builtin.pip:
    name: ['boto', 'boto3', 'botocore']
    umask: "0022"

- name: Upgrade all OS packages
  ansible.builtin.dnf:
    name: "*"
    state: latest
    allowerasing: yes
    security: "{{ update_only_security_packages }}"
  when: update_packages
    
- name: Install pre-req packages
  ansible.builtin.dnf:
    name: "{{ oracle_prequisite_packages }}"
    state: present

- name: Create DBA Group
  ansible.builtin.group:
    name: DBA
    state: present
   
- name: Allow 'DBA' group to sudo
  copy:
    content: |
              %DBA ALL=(ALL) NOPASSWD: ALL
    dest: /etc/sudoers.d/DBA

- name: Adding DBA users
  ansible.builtin.user:
    name: "{{ item.username }}"
    shell: /bin/bash
    groups: "DBA"
    append: yes
    expires: -1
  loop: "{{ users }}"

- name: Adding user public keys
  authorized_key:
    user: "{{ item.username }}"
    state: present
    key: "{{ item.pub_ssh_key }}"
  loop: "{{ users }}"
  when: not ansible_check_mode

- name: Remove default session timeouts
  ansible.builtin.file: 
    name: /etc/profile.d/tmout.sh
    state: absent

- name: Remove default session timeouts (2/2)
  ansible.builtin.lineinfile:  
    line: "ClientAliveCountMax {{ ClientAliveCountMax }}"
    path: /etc/ssh/sshd_config
    regexp: '^ClientAliveCountMax.*$'

- name: Allow oracle user to use cron
  lineinfile:
    destfile: /etc/cron.allow
    line: "{{ item }}"
  loop:
    - "oracle"
    - "root"

- name: Create Oracle sysctl config
  ansible.builtin.template:
    src: files/98-oracle.conf
    dest: /etc/sysctl.d/98-oracle.conf
    owner: root
    group: root

- name: Create Oracle security limits
  ansible.builtin.template:
    src: files/oracle-rdbms-server-12cR1-preinstall.conf
    dest: /etc/security/limits.d/oracle-rdbms-server-12cR1-preinstall.conf 
    owner: root
    group: root
    
- name: Create any groups required
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
    state: present
  loop: "{{ oracle_groups }}"

- name: Create any users required
  ansible.builtin.user:
    name: "{{ item.name }}"
    uid: "{{ item.uid }}"
    groups: "{{ item.groups }}"
    append: yes
  loop: "{{ oracle_users }}"

- name: Check if AWS ClI executable exists
  stat: 
    path: /usr/local/bin/aws
  register: aws_cli_stat

- name: "Get and install AWS CLI"
  block:
    - name: Download AWS CLI
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscli-exe-linux-x86_64.zip
        mode: '0644'

    - name: Extract AWS CLIv2 zip
      ansible.builtin.unarchive:
        src: /tmp/awscli-exe-linux-x86_64.zip
        dest: /tmp/
        remote_src: yes

    - name: Install AWS CLIv2
      ansible.builtin.command: sh /tmp/aws/install
      args:
        creates: /usr/local/bin/aws
  when: (aws_cli_stat.stat.exists == false) or (update_aws_cli)

- name: Disable Firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: stopped
    enabled: no
  when: ansible_virtualization_type != "docker"

- name: Update Postfix for correct domain
  ansible.builtin.lineinfile:  
    path: /etc/postfix/main.cf
    line: "mydomain = companieshouse.gov.uk"
    regexp: '^#mydomain = domain.tld'
  ignore_errors: "{{ ansible_check_mode }}"

- name: Update Postfix for correct SMTP relay
  ansible.builtin.lineinfile:  
    path: /etc/postfix/main.cf
    line: "relayhost = smtp-outbound.sharedservices.aws.internal"
    regexp: '#relayhost = $mydomain'
  ignore_errors: "{{ ansible_check_mode }}"

- name: Enable postfix
  ansible.builtin.systemd:
    name: postfix
    state: started
    enabled: yes
      
- name: Put SELinux in permissive mode, logging actions that would be blocked.
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ansible_virtualization_type != "docker"

- name: Create install directories for Oracle binaries
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: oracle
    group: oracle
    mode: '0755'
  loop: 
    - /u01/app/oracle/product/12.1.0.2/db_1
    - /u01/software/
    
- name: "Get and unarchive installer files (test)"
  block:
    - name: Copy files from local dir to test host and unarchive
      ansible.builtin.unarchive:
        remote_src: no
        src: "{{ item }}"
        dest: "/u01/software/"
        mode: 0775
        owner: oracle
        group: oracle
      with_fileglob:
        - files/*.zip
  when: (ansible_virtualization_type == "docker") and ( install_oracle ) 

- name: "Get and unarchive installer files (remote)"
  block:
    - name: Copy files
      amazon.aws.aws_s3:
        bucket: "{{ aws_s3_release_bucket }}"
        object: "{{ item }}"
        dest: "/tmp/{{ item | basename }}"
        mode: get
        overwrite: different
        aws_access_key: "{{ aws_s3_release_bucket_access_key | default(omit) }}"
        aws_secret_key: "{{ aws_s3_release_bucket_secret_key | default(omit) }}"
      loop: "{{ aws_s3_release_object_paths }}"

    - name: Unarchive files 
      ansible.builtin.unarchive:
        remote_src: yes
        src: "/tmp/{{ item | basename }}"
        dest: "/u01/software/"
        mode: 0775
        owner: oracle
        group: oracle
      loop: "{{ aws_s3_release_object_paths }}"
  when: (ansible_virtualization_type != "docker") and ( install_oracle ) 

- name: Install Oracle
  block: 
    - name: Download response file
      ansible.builtin.copy:
        src: oui12102.rsp
        dest: /tmp/
        owner: oracle
        group: oracle

    - name: Run Oracle Installer
      ansible.builtin.shell:
        cmd: "./runInstaller -silent -waitforcompletion -ignoreSysPrereqs -responseFile /tmp/oui12102.rsp"
        chdir: "/u01/software/database"
      become_user: oracle

    - name: Run Oracle installation postscripts
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop: 
        - "/u01/app/oraInventory/orainstRoot.sh"
        - "/u01/app/oracle/product/12.1.0.2/db_1/root.sh"
  when: (ansible_virtualization_type != "docker") and ( install_oracle )

- name: "Setup AFD Postcode lookup library (OLTP only)"
  block:
    - name: ensure pcplus directory exists
      file:
        path: /opt/pcplus/
        state: directory

    - name: Copy files
      amazon.aws.aws_s3:
        bucket: "{{ aws_s3_release_bucket }}"
        object: "pcplus/pcplus_linux64.tar.gz"
        dest: "/tmp/pcplus_linux64.tar.gz"
        mode: get
        overwrite: different
        aws_access_key: "{{ aws_s3_release_bucket_access_key | default(omit) }}"
        aws_secret_key: "{{ aws_s3_release_bucket_secret_key | default(omit) }}"

    - name: Unarchive files 
      ansible.builtin.unarchive:
        remote_src: yes
        src: "/tmp/pcplus_linux64.tar.gz"
        dest: "/opt/pcplus/"
        mode: 0664
        owner: root
        group: root
  when: (ansible_virtualization_type != "docker") and ( install_postcode ) 
